[<Start>]
program: expression

present<item> :  {} | item  ;

float_number: 
  N
  DOT
  N?
  

datatype: name=IDENT extra=(-L (n=N) (COMMA n=N)? -R)?
  | 'EXCEPTION' 
  | name=identifier ATTRIBUTE 'ROWTYPE'
  | name=identifier ATTRIBUTE 'TYPE'

list_with_sep<item sep>: i1=(item)? is=(-sep item)*

non_empty_list_with_sep<item sep>: i1=item is=(-sep item)*
  
identifier : parts=non_empty_list_with_sep<IDENT DOT> db=(-AT IDENT)? 

binExpr<operand binOp>: h=operand tl=(binOp operand)*
  
expression: or_expr

or_expr: binExpr<and_expression ('OR' )>

and_expression: binExpr<not_expr ('AND' )>

not_expr: n=('NOT')? e=relation_expr
  
relation_expr: comparation_expression
              | in_expr
              | like_expr
              | is_null_expression
              | between_expression

in_expr: e=comparation_expression n=('NOT')? 'IN' L e1=comparation_expression, es=(-COMMA comparation_expression)* R
        
like_expr: e=comparation_expression n=('NOT')? 'LIKE' e1=comparation_expression
        
is_null_expression:
  expr=expression 'IS' not=present<'NOT'> 'NULL'
  
between_expression:
  expr1 = expression not=present<'NOT'> 'BETWEEN' expr2=expression 'AND' expr3=expression 
  
comparation_expression: binExpr<add_expr compare_op> 

add_expr: binExpr<mul_expr ( MINUS_SIGN  | PLUS | CONCAT )>

mul_expr: binExpr<unary_sign_expr (ASTERISK | SLASH | PERCENT)>

unary_sign_expr: s=(MINUS_SIGN | PLUS)? e=exponent_expr
  
exponent_expr: e1=atom e2=(-EXPONENT atom)?
  
atom: n=N 
    | f = float_number 
    | b=('TRUE' | 'FALSE' )
    | i=identifier
    | l=LITERAL 
    | -L e=expression -R 
    | function_call
    | sql_expression
	| case_expression
    | 'NULL' 
    | L tupple=(identifier -COMMA?)+ R 
	| sql_row_count
	| ASTERISK 
	| e1=expression L PLUS R       
	| i=IDENT DOT ASTERISK      
	| cursor_atribute
	| row_number
	| collection_element_field
	| collection_last
	| collection_first
	| table_constructor
	| cast_expression
	| row_expression
	| analytic_functions

row_expression: 'ROW' 

analytic_functions: sum_function | max | last_value | count_expr | row_number | dense_rank
| str_sum

cast_expression: 'CAST' L e=expression 'AS' t=identifier R 

table_constructor: 'TABLE' L e=expression R 

collection_last: name=identifier DOT 'LAST' 

collection_first: name=identifier DOT 'FIRST' 

sum_function: 'SUM' L e=expression R overs = (-'OVER' -L select_clause+  -R)?
  
collection_element_field: i=identifier L e=expression R DOT i2=identifier
  
row_number: 'ROW_N' L R 'OVER' L p=partition_by_clause? ord=order_by_clause R
  

cursor_atribute: i=identifier ATTRIBUTE t=cursor_atribute_type 
  
cursor_atribute_type: 
  'NOTFOUND' 
  | 'FOUND' 
  | 'ISOPEN' 
  | 'ROWC' 

compare_op: LESS 
          | GREATER 
          | LE 
          | GE 
          | EQUAL 
          | NOTEQUAL 

function_call: n=identifier L ps=list_with_sep<function_param COMMA>  R
  
function_param: 
  e=expression 
  | formal=identifier ASSOCIATION e=expression 


case_expression: 'CASE' testExpr=(expression)?
  whens=(
          when_kw='WHEN' whenExpr=expression 'THEN' resultExpr=expression
          
        )+
    elseExpr=(-'ELSE' expression)? 
    'END' 'CASE'? (identifier)?
  
sql_expression: s=select_expression 

select_expression: 'SELECT' d=('DISTINCT')? f1=select_field fs=(-COMMA select_field)* clauses=(select_clause)*

select_field: e=expression alias=('AS'? name=IDENT)?

select_clause: fr = from_clause  
| wh = where_clause 
| gb = group_by_clause 
| ob = order_by_clause 
| pb = partition_by_clause 
| wc = windowing_clause 
| su = select_union_clause 
| si = select_intersect_clause 
| mc = select_minus_clause 
| sh = select_having 
| wb = windowing_between 
| fu = for_update_clause 

from_clause: 'FROM' s1=select_source ss=(-COMMA select_source)* 

select_having: 'HAVING' e=expression 

for_update_clause: 'FOR' 'UPDATE' 

group_by_clause: 'GROUP' 'BY' lst=list_with_sep<expression COMMA>

order_by_clause: 'ORDER' 'BY' e1=order_expr es=(-COMMA order_expr)*

order_expr: e=expression t=sort_order? n=nulls_order? 

partition_by_clause: 'PARTITION' 'BY' L? e1=expression es=(-COMMA expression)* R?
  
sort_order: 'ASC'  | 'DESC' 

nulls_order: 'NULLS' 'FIRST'  | 'NULLS' 'LAST' 

windowing_clause: t=windowing_type v=windowing_value 
  
windowing_between: t=windowing_type 'BETWEEN' v1=windowing_value 'AND' v2=windowing_value
  
windowing_type: 'ROWS'  | 'RANGE' 

windowing_value: 
  'UNBOUNDED' 'PRECEDING' 
  | 'CURRENT' 'ROW' 
  | e=expression 'PRECEDING' 

select_union_clause: 'UNION' all=present<'ALL'> L? s=select_expression R?
  
select_minus_clause: 'MINUS' L? s=select_expression R?
  
select_intersect_clause: 'INTERSECT' s=select_expression
   
select_source:   e=expression alias= (('AS')? alias=IDENT )?
j=join_part?

where_clause: 'WHERE' e=expression 

join_part: t=join_type? 'JOIN' s=select_source e=(-'ON' expression)? 

join_type: 'INNER'  | 'LEFT' 'OUTER'?  | 'RIGHT' 'OUTER'?  |
           'FULL' 'OUTER'? 

with_clause: 'WITH' w1=with_inner ws=(-COMMA with_inner)* 
  
with_inner: i=identifier 'AS' L s=select_expression R 
    
last_value: 'LAST_VALUE' L e=expression nulls=('IGNORE' 'NULLS')? R over=over_state
  
max: 'MAX' L d=('DISTINCT')? e=expression R over=(over_state)?
  
sql_row_count: 'SQL' ATTRIBUTE 'ROWC' 
  
over_state: 'OVER' L an=(select_clause)* R
  
dense_rank: 'DENSE_RANK' L e=expression? R over=(over_state)? 

str_sum: 'STRSUM' L e=expression? R over=(over_state)? 

count_expr: C L c=count_type? e=expression? R over=(over_state)? 

count_type: 
    'ALL' 
    | 'DISTINCT' 