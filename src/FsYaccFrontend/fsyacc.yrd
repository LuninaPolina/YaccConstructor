{
//  Copyright 2010-2011 Konstantin Ulitin
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.


open Yard.Core.IL
open Yard.Core.IL.Production
}

[<Start>]
s:  h=HEAD? tokens=token* assoc* st=start typedef+ DOUBLE_PERC rules=rule* DOUBLE_PERC? 
    { h, List.concat tokens, st, rules }   ;

token: TOKEN_KW TYPE? tokens=IDENT+ { tokens };

assoc: ASSOC_KW IDENT+ ; 

start: START_KW name=IDENT+ { name };

typedef: TYPE_KW TYPE IDENT+ ;

rule: name=IDENT COLON BAR? alt=alternative opt_alts=(BAR alt=alternative {alt})* 
    { { new Rule.t<Source, Source> with 
            name=name 
            and args=[] 
            and body=if opt_alts=[] then alt else PAlt(alt, List.reduce (fun acc prod -> PAlt(acc, prod)) opt_alts)
            and _public=false
            and metaArgs=[] } } ;

alternative:
  lst=(s=IDENT {
        (s,(0,0,"")) |> fun st ->
            if Char.IsUpper s.[0] then PToken st
            else PRef(st, None) }
      )*
  ac=ACTION_CODE
  {
    PSeq(lst |> List.map (fun prod ->
			{new Production.elem<Source, Source>
				with omit=false
				and rule=prod
				and binding=None
				and checker=None})
		 , Some <| new Source(ac,new SourcePosition(), new SourcePosition(), "")) }
	;
